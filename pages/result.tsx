import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Result.module.css';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { Loading } from '../src/components/common';
import styled from 'styled-components';
import AssignmentTurnedInIcon from '@mui/icons-material/AssignmentTurnedIn';
import BookIcon from '@mui/icons-material/Book';
import { getApi } from '../lib/api';
import { category } from '../src/data/category';
import { colors } from '../src/data/colors';

const API_DOMAIN = 'https://catch-back.herokuapp.com/';

interface ImagePorps {
  readonly src: string;
  readonly piority: boolean;
}

const Result: NextPage = () => {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [analysisResult, setAnaalysisResult] = useState({
    type: [{ value: '', label: '' }],
    path: '',
  });
  const [description, setDescription] = useState({
    category: '',
    item_name: '',
    how_to: [''],
    caution: [
      {
        title: '',
        body: '',
      },
    ],
  });
  useEffect(() => {
    if (router.query.imageID) {
      const imageId = Number(router.query.imageID);
      getReusltData(imageId);
    }
  }, [router.query]);

  const getReusltData = async (imageId: number) => {
    setIsLoading(true);
    const response = await getApi.getClassificationResult(imageId);
    const result = response?.result?.[0];
    const type_description = category.filter(
      (el) => el.category == result?.type?.[0]?.label,
    )[0];
    setAnaalysisResult(result);
    setDescription(type_description);
    setDescription;
    setIsLoading(false);
  };

  return (
    <div className={styles.container}>
      {isLoading ? (
        <Loading />
      ) : (
        <>
          <Head>
            <title>Catch App</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <h3 className={styles.name}>{description.item_name}</h3>
          <Picture src={`${API_DOMAIN}${analysisResult.path}`} piority={true} />
          <div className={styles.detail_content_field}>
            <h3 className={styles.field_title_text}>
              <AssignmentTurnedInIcon className={styles.field_icon} />
              분석결과
            </h3>
            <div className={styles.field_section}>
              <h4 className={styles.field_section_title_level1}>확률</h4>
              {analysisResult?.type?.length > 0 &&
                analysisResult.type?.map((item, idx) => (
                  <div className={styles.sub_label}>
                    <div className={styles.bar_graph_holder}>
                      <div
                        className={styles.bar_graph_label}
                        style={{ color: colors[idx].inner }}
                      >
                        {item.label}
                      </div>
                      <div
                        className={styles.graph_container}
                        style={{ backgroundColor: colors[idx].background }}
                      >
                        <div
                          className={styles.graph_inner}
                          style={{
                            width: `${
                              item?.value ? Number(item.value) * 100 : 0
                            }%`,
                            backgroundColor: colors[idx].inner,
                          }}
                        />
                      </div>
                    </div>
                  </div>
                ))}
              {/* {analysisResult?.type?.length > 0 &&
                analysisResult.type?.map((item) => (
                  <div className={styles.field_section_text}>
                    {item?.label}/{item?.value}
                  </div>
                ))} */}
            </div>
            <div className={styles.field_section}>
              <h4 className={styles.field_section_title_level1}>
                분리수거 방법
              </h4>
              <ul className={styles.field_section_list}>
                {description.how_to.length > 0 &&
                  description.how_to.map((text) => (
                    <li className={styles.field_section_text}>{text}</li>
                  ))}
              </ul>
            </div>
          </div>
          <div className={styles.detail_content_field}>
            <h3 className={styles.field_title_text}>
              <BookIcon className={styles.field_icon} />
              유의사항
            </h3>{' '}
            {description.caution.length > 0 &&
              description.caution.map((el) => (
                <div className={styles.field_string_gird}>
                  <div className={styles.field_string_gird_content}>
                    <div
                      className={styles.field_string_gird_content_title_cntr}
                    >
                      <AssignmentTurnedInIcon
                        className={styles.field_string_grid_icon}
                      />
                      <h4 className={styles.field_string_gird_content_title}>
                        {el.title}
                      </h4>
                    </div>
                    <div className={styles.field_string_gird_content_text}>
                      {el.body}
                    </div>
                  </div>
                </div>
              ))}
          </div>
        </>
      )}
    </div>
  );
};

export default Result;

const Picture = styled.div<ImagePorps>`
  position: relative;
  margin-top: 2rem;
  @media screen and (min-width: 480px) {
    width: 240px;
    height: 240px;
  }
  @media screen and (max-width: 480px) {
    width: 50vw;
    height: 50vw;
  }
  border-radius: 0.8rem;
  background: url(${(props: any) => props?.src}) center center / contain
    no-repeat;
`;
